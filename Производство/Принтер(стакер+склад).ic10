# Printer Logistics V5.1 CowsAreEvil & DarkRaven
alias Printer d0
alias Stacker d1  #(Optional)
alias Sorter d2   #(Optional)
alias Vending d3  #(Optional)
alias Button d4   #(Optional)
alias Console d5  #(Optional)
alias rExportCount r14
alias rNeedCount r13
alias rPrinterOn r12
alias rOldImport r11
alias rCounter r10
alias rIngot r9
alias rPrinting r8
alias rPrinterWasOpen r7
define kCLEARINGOT -1
setup:
move rIngot kCLEARINGOT
bdns Sorter start
s Sorter Mode 2
start:
yield
brdns Console 4
sne r0 rIngot kCLEARINGOT
and r0 r0 rPrinterOn
s Console On r0
checkButton:
bdns Button checkSorter
l r0 Button Setting
breqz r0 2
move rIngot kCLEARINGOT
checkSorter:
bdns Sorter UpdatePrinterIngotImport
ls r0 Sorter 0 Occupied
s Sorter On r0 # On/Off
beq r0 0 UpdatePrinterIngotImport
ls r0 Sorter 0 OccupantHash
seq r0 r0 rIngot
s Sorter Output r0
UpdatePrinterIngotImport:
l r0 Printer ImportCount
ble r0 rOldImport UpdateStacker # not new delivered
move rIngot kCLEARINGOT # Update delivery
move rOldImport r0
l r0 Printer Activate
breq r0 rPrinting 2
s Printer Activate rPrinting
UpdateStacker:
ls r0 Stacker 0 Occupied
or r0 r0 rPrinterWasOpen
s Stacker On r0
beqz rPrinterOn UpdatePrinterProduced
breqz rPrinterWasOpen 2
s Stacker Activate 1
UpdatePrinterProduced:
l r0 Printer Open
l rPrinterOn Printer On
breq r0 rPrinterWasOpen 4
move rPrinterWasOpen r0
select r0 rPrinterWasOpen 500 rNeedCount
s Stacker Setting r0
beq rPrinterWasOpen 1 start
beq rPrinterOn 0 checkRestock # if Printer off - exit
l rExportCount Printer ExportCount # How much has already been produced
l rNeedCount Stacker Setting # How much do need to produce
sgt rPrinting rExportCount 0 # Production has begun
blt rExportCount rNeedCount checkRestock # Wait if not enough is produced
s Printer Activate 0
yield
s Printer On 0
s Stacker Activate 1
printerclean:
s Printer ClearMemory 1
s Stacker ClearMemory 1
move rOldImport 0
checkRestock:
bdns Vending start
yield
bne rIngot kCLEARINGOT start
move r0 HASH("Iron")
jal FuncCheckIngotCount
move r0 HASH("Copper")
jal FuncCheckIngotCount
move r0 HASH("Gold")
jal FuncCheckIngotCount
move r0 HASH("Silicon")
jal FuncCheckIngotCount
move r0 HASH("Steel")
jal FuncCheckIngotCount
lr r0 Printer Required 1787814293 #Waspaloy
select rIngot r0 156348098 rIngot
lr r0 Printer Required -500544800 #Stellite
select rIngot r0 -1897868623 rIngot
lr r0 Printer Required -586072179 #Inconel
select rIngot r0 -787796599 rIngot
lr r0 Printer Required 2019732679 #Hastelloy
select rIngot r0 1579842814 rIngot
lr r0 Printer Required -1493155787 #Astroloy
select rIngot r0 412924554 rIngot
lr r0 Printer Required -1206542381 #Solder
select rIngot r0 -82508479 rIngot
lr r0 Printer Required -626453759 #Invar
select rIngot r0 -297990285 rIngot
lr r0 Printer Required 478264742 #Electrum
select rIngot r0 502280180 rIngot
lr r0 Printer Required 1731241392 #Constantan
select rIngot r0 1058547521 rIngot
lr r0 Printer Required 687283565 #Silver
select rIngot r0 -929742000 rIngot
lr r0 Printer Required 556601662 #Nickel
select rIngot r0 -1406385572 rIngot
lr r0 Printer Required -2002530571 #Lead
select rIngot r0 2134647745 rIngot
IngotRequest:
s db Setting rIngot
beq rIngot kCLEARINGOT start
s Vending RequestHash rIngot
j start
FuncCheckIngotCount:
lr r1 Printer Required r0
lr r2 Printer Contents r0
slt r2 r2 10 # minimum count for Printer
max r1 r1 r2 # if Printer required < minimum count
beqz r1 ra # exit if not required
rmap rIngot Printer r0
j IngotRequest